<?php

namespace framework;

use Doctrine\DBAL\Cache\QueryCacheProfile;
use Doctrine\DBAL\Connection;
use Doctrine\DBAL\DBALException;
use Doctrine\DBAL\Driver\PDOException;


class DbalConnection extends Connection
{

    public function executeQuery($query, array $params = array(), $types = array(), QueryCacheProfile $qcp = null)
    {
        try {
            return parent::executeQuery($query, $params, $types, $qcp); // TODO: Change the autogenerated stub
        } catch (DBALException $e) {
            $exception = $e;

            while ($e = $e->getPrevious()) {

                if ($e instanceof PDOException) {
                    if ($e->errorInfo[1] == 2006 && $e->errorInfo[2] == 'MySQL server has gone away') {
                        $this->reConnect();

                        return $this->executeQuery($query, $params, $types, $qcp);
                    } else
                        throw new PDOException($e);
                } elseif (!$e->getPrevious()) {
                    throw new DBALException($exception);
                }
            }
        }

    }


    public function executeUpdate($query, array $params = array(), array $types = array())
    {
        try {
            return parent::executeUpdate($query, $params, $types); // TODO: Change the autogenerated stub
        } catch (DBALException $e) {
            $exception = $e;

            while ($e = $e->getPrevious()) {

                if ($e instanceof PDOException) {
                    if ($e->errorInfo[1] == 2006 && $e->errorInfo[2] == 'MySQL server has gone away') {
                        $this->reConnect();

                        return parent::executeUpdate($query, $params, $types);
                    } else
                        throw new PDOException($e);
                } elseif (!$e->getPrevious()) {
                    throw new DBALException($exception);
                }
            }
        }

    }


    private function reConnect()
    {
        if ($this->ping() === false) {
            $this->close();
            $this->connect();
        }

        return true;
    }


}